/*
SQLyog 企业版 - MySQL GUI v8.14 
MySQL - 8.0.18 : Database - traindb
*********************************************************************
*/


/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
--CREATE DATABASE /*!32312 IF NOT EXISTS*/`traindb` /*!40100 DEFAULT CHARACTER SET utf8 */ /*!80016 DEFAULT ENCRYPTION='N' */;

USE `traindb`;

/*Table structure for table `t_train_main` */

DROP TABLE IF EXISTS `t_train_main`;

CREATE TABLE `t_train_main` (
  `id` varchar(32) NOT NULL COMMENT 'id',
  `trainTitle` varchar(255) DEFAULT '' COMMENT '训练标题',
  `trainContent` blob COMMENT '训练内容',
  `trainType` int(11) DEFAULT NULL COMMENT '训练类型',
  `trainTimes` int(11) DEFAULT NULL COMMENT '训练次数',
  `trainAllTime` bigint(32) DEFAULT NULL COMMENT '训练总时长',
  `lastTrainTime` datetime DEFAULT NULL COMMENT '上次训练时间',
  `date_created` datetime DEFAULT NULL COMMENT '邮政编码',
  `remark` varchar(2000) DEFAULT '' COMMENT '电话',
  `planFlag` varchar(8) DEFAULT '' COMMENT '传真',
  `errorTimes` int(11) DEFAULT '0' COMMENT '训练错误次数',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `t_train_main` */

insert  into `t_train_main`(`id`,`trainTitle`,`trainContent`,`trainType`,`trainTimes`,`trainAllTime`,`lastTrainTime`,`date_created`,`remark`,`planFlag`,`errorTimes`) values ('014f82fc263a4a1ab89a36b274e1bb84','spring注解(@Scope)','singleton:单实例（默认）：IOC容器启动的时候会调用方法创建对象并放到IOC容器中，以后每次获取的就是直接从容器中拿（大Map.get）的同一个bean\nprototype:多实例：IOC容器启动的时候，IOC容器启动并不会去调用方法创建对象，而是每次获取的时候才会调用方法创建对象\nrequest:主要针对web应用，递交一次请求创建一个实例\nsession:同一个session创建一个实例\n\n1、建 Cap3MainConfig\n@Configuration\npublic class Cap3MainConfig {\n\n	@Scope(\"prototype\")\n	@Bean\n	Person person(){\n		return new Person(\"james\",20);\n	}\n}\n\n2、建 Cap3Test\nApplicationContext ac = new AnnotationConfigApplicationContext(Cap3MainConfig.class);\n\nObject bean1 = ac.getBean(\"person\");\nObject bean2 = ac.getBean(\"person\");\nSystem.out.println(bean1 == bean2);',1,3,21,'2019-12-31 09:36:29','2019-12-29 18:19:51','','1',0),('2d48a9121273497bbd705fb84d7d34f0','spring注解(@ComponentScan)','1、建OrderController、OrderDao、OrderService\n\n\n2、建 Cap2MainConfig\n@Configuration\npublic class Cap2MainConfig {\n\n	@Bean(name=\"abcperson\")\n	Person person(){\n		return new Person(\"james\",20);\n	}\n}\n\n3、写测试类 CapTest2.java\npublic class CapTest2 {\n\n	@Test\n	public void test01(){\n		ApplicationContext ac = new AnnotationConfigApplicationContext(Cap2MainConfig.class);\n		String[] names = ac.getBeanDefinitionNames();\n		for (String name:names) {\n			System.out.println(name);\n		}\n	}\n}\n\n4、开始用标签\n(1)、@ComponentScan\n(2)、@ComponentScan(value=\"com.enjoy.cap2\")\n(3)、@ComponentScan(value=\"com.enjoy.cap2\",includeFilters={\n		@Filter(type=FilterType.ANNOTATION,classes={Controller.class})\n},useDefaultFilters=false)\n(4)、@ComponentScan(value=\"com.enjoy.cap2\",excludeFilters={\n		@Filter(type=FilterType.ANNOTATION,classes={Controller.class})\n},useDefaultFilters=true)\n(5)、@ComponentScan(value=\"com.enjoy.cap2\",includeFilters={\n		@Filter(type=FilterType.ASSIGNABLE_TYPE,classes={OrderController.class})\n},useDefaultFilters=false)\n(6)、自定义\n@ComponentScan(value=\"com.enjoy.cap2\",includeFilters={\n		@Filter(type=FilterType.CUSTOM,classes={JamesTypeFilter.class})\n},useDefaultFilters=false)\n\n--写 JamesTypeFilter 类\npublic class JamesTypeFilter implements TypeFilter{\n\n	public boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) throws IOException {\n		\n		ClassMetadata classMetadata = metadataReader.getClassMetadata();\n		String className = classMetadata.getClassName();\n		System.out.println(\"----------->\"+className);\n		if(className.contains(\"Dao\")){\n			return true;\n		}\n		\n		return false;\n	}\n\n	\n}\n\n',1,3,1037,'2019-12-31 09:26:18','2019-12-29 17:30:14','','1',0),('4f5512108b5a43a19857e1aa60578d6f','mysql新增字段','--添加字段\nALTER TABLE 表名 ADD 字段名 字段类型(字段长度) DEFAULT 默认值 COMMENT \'注释\'\nalter table t_train_main add errorTimes int(11) DEFAULT 0 COMMENT \'训练错误次数\'\n\n--删除字段\nALTER TABLE 表名 DROP 字段名 \nalter table t_train_main drop errorTimes;\n\n--修改字段\na、修改字段名：\nALTER TABLE 表名 CHANGE 旧字段名  新字段名\n\nb、修改字段类型\nALTER TABLE 表名 MODIFY 字段名 字段类型(字段长度)',2,2,101,'2020-01-01 02:04:21','2019-12-31 10:19:42','','1',1),('6ca5904355cd4ebcbfd278d5db80a188','spring加载bean(xml)','1、新建 Person.java\nprivate String name;\nprivate Integer age;\n\n2、beans.xml里添加\n\n<bean id=\"person\" class=\"com.enjoy.cap1.Person\">\n  	<property name=\"name\" value=\"hahacs\"></property>\n  	<property name=\"age\" value=\"19\"></property>\n  </bean>\n\n3、测试类MainTest.java\nApplicationContext ac = new ClassPathXmlApplicationContext(\"beans.xml\");\nPerson person = (Person)ac.getBean(\"person\");\nSystem.out.println(person);',1,4,152,'2020-01-01 08:26:59','2019-12-29 17:09:29','package com.enjoy.cap1;\n\npublic class Person {\n\n	private String name;\n	private Integer age;\n	\n	public String getName() {\n		return name;\n	}\n	public void setName(String name) {\n		this.name = name;\n	}\n	public Integer getAge() {\n		return age;\n	}\n	public void setAge(Integer age) {\n		this.age = age;\n	}\n	\n	public Person(){\n		super();\n	}\n	\n	public Person(String name, Integer age) {\n		super();\n		this.name = name;\n		this.age = age;\n	}\n	\n	@Override\n	public String toString() {\n		return \"Person [name=\" + name + \", age=\" + age + \"]\";\n	}\n	\n}\n','1',1),('6f6a7d8658fd4fd4aa16675f7c6f390a','spring注解(@Lazy)','1、创建 Cap4MainConfig\npublic class Cap4MainConfig {\n\n	@Lazy\n	@Bean\n	Person person(){\n		System.out.println(\"此时才创建对象\");\n		return new Person(\"james\",20);\n	}\n}\n\n2、创建 Cap4Test2\nApplicationContext ac = new AnnotationConfigApplicationContext(Cap4MainConfig.class);\n\nSystem.out.println(\"IOC容器创建完成......\");\nObject bean1 = ac.getBean(\"person\");',1,3,98,'2019-12-31 09:39:34','2019-12-29 18:33:14','','1',0),('767e97eb47d54eecb5cb0ce55d5ed570','spring注解(@Import)','1、新增类 com.enjoy.cap6.bean.Dog\n\n2、配置类 MainConfig6\n@Import(value={Dog.class})\n@Configuration\npublic class MainConfig6 {\n\n	@Bean\n	Person person(){\n		return new Person(\"james\",123);\n	}\n	\n}\n\n3、测试类 MainTest6\npublic class MainTest6 {\n	public static void main(String[] args) {\n		ApplicationContext ac = new AnnotationConfigApplicationContext(MainConfig6.class);\n		String[] names = ac.getBeanDefinitionNames();\n		for(String name:names){\n			System.out.println(name);\n		}\n	}\n}\n\n4、创建 Cat Fish Tiger\n\n5、创建 JamesImportSelect\npublic class JamesImportSelect implements ImportSelector{\n	@Override\n	public String[] selectImports(AnnotationMetadata importingClassMetadata) {\n		\n		return new String[]{\"com.enjoy.cap6.bean.Fish\",\"com.enjoy.cap6.bean.Tiger\"};\n	}\n}\n\n6、@Import(value={Dog.class,Cat.class,JamesImportSelect.class})\n\n7、创建 JamesImportBeanDefinitionRegistrar\npublic class JamesImportBeanDefinitionRegistrar implements ImportBeanDefinitionRegistrar{\n	@Override\n	public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {\n		boolean bean1 = registry.containsBeanDefinition(\"com.enjoy.cap6.bean.Cat\");\n		boolean bean2 = registry.containsBeanDefinition(\"com.enjoy.cap6.bean.Dog\");\n		if(bean1 && bean2){\n			RootBeanDefinition rootBeanDefinition = new RootBeanDefinition(Pig.class);\n			registry.registerBeanDefinition(\"pig\", rootBeanDefinition);\n		}\n	}\n}',1,1,1,'2020-01-01 15:59:58','2020-01-01 09:06:32','','1',0),('8269821bb2f74d3aad26e70b424f95c7','maven创建spring项目','1、勾选 create a simple\n\ncom.enjoy\nspring-anno\n\n\n2、更改pom.xml\n<dependencies>\n  	<dependency>\n  		<groupId>org.springframework</groupId>\n  		<artifactId>spring-context</artifactId>\n  		<version>5.0.6.RELEASE</version>\n  	</dependency>\n  	\n  	<dependency>\n  		<groupId>junit</groupId>\n  		<artifactId>junit</artifactId>\n  		<version>4.12</version>\n  	</dependency>\n  </dependencies>\n\n\n3、新建 beans.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                        http://www.springframework.org/schema/beans/spring-beans.xsd\">\n  \n  \n</beans>',4,4,381,'2020-01-01 08:18:21','2019-12-29 16:58:54','','1',0),('da68ea242b8f41bd86d4669f08a863f9','Spring注解(@Conditional)','1、新建类 MainConfig5\n@Configuration\npublic class MainConfig5 {\n\n	@Bean\n	Person person(){\n		System.out.println(\"创建容器person.....\");\n		return new Person(\"james\",132);\n	}\n	\n	@Conditional(value={WinCondition.class})\n	@Bean\n	Person lision(){\n		System.out.println(\"创建容器Lison.....\");\n		return new Person(\"Lison\",132);\n	}\n	\n	@Conditional(value={LinCondition.class})\n	@Bean\n	Person james(){\n		System.out.println(\"创建容器james.....\");\n		return new Person(\"james\",132);\n	}\n	\n}\n\n2、创建 WinCondition 类\npublic class WinCondition implements Condition{\n\n	@Override\n	public boolean matches(ConditionContext context, AnnotatedTypeMetadata arg1) {\n		Environment environment = context.getEnvironment();\n		String osName = environment.getProperty(\"os.name\");\n		if(osName.contains(\"Windows\")){\n			return true;\n		}\n		return false;\n	}\n}\n\n2、建造测试类 \nApplicationContext ac = new AnnotationConfigApplicationContext(MainConfig5.class);\n		String[] names = ac.getBeanDefinitionNames();\n		for(String name:names){\n			System.out.println(name);\n		}\n\n4、右键测试类，Run Configurations\nArguments 输入 -Dos.name=linux',1,1,1,'2020-01-01 16:01:08','2020-01-01 08:49:39','','1',0),('ecbdd470a4fb4eae8bba5cb6d0c7051e','spring加载bean(注解)','1、新建类 MainConfig.java\n@Configuration\npublic class MainConfig {\n\n	@Bean\n	public Person person(){\n		return new Person(\"james\",20);\n	}\n}\n\n2、建测试类 MainTest2.java\nApplicationContext ac = new AnnotationConfigApplicationContext(MainConfig.class);\n		\nPerson person = (Person)ac.getBean(\"person\");\nSystem.out.println(person);\n\n3、根据bean类型获取beanName\nac.getBeanNamesForType(Person.class);',1,4,411,'2020-01-01 08:19:31','2019-12-29 17:15:09','','1',0);

/*Table structure for table `t_train_plan` */

DROP TABLE IF EXISTS `t_train_plan`;

CREATE TABLE `t_train_plan` (
  `id` varchar(32) NOT NULL COMMENT 'uuid',
  `serialno` bigint(32) NOT NULL COMMENT '序号',
  `planTime` date DEFAULT NULL COMMENT '计划训练时间',
  `trainTime` datetime DEFAULT NULL COMMENT '实际训练时间',
  `trainFlag` varchar(8) DEFAULT '0' COMMENT '是否已训练，0否，1是',
  PRIMARY KEY (`id`,`serialno`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `t_train_plan` */

insert  into `t_train_plan`(`id`,`serialno`,`planTime`,`trainTime`,`trainFlag`) values ('014f82fc263a4a1ab89a36b274e1bb84',1,'2019-12-29','2019-12-29 18:25:05','1'),('014f82fc263a4a1ab89a36b274e1bb84',2,'2019-12-30','2019-12-30 09:20:40','1'),('014f82fc263a4a1ab89a36b274e1bb84',3,'2019-12-31','2019-12-31 09:36:29','1'),('014f82fc263a4a1ab89a36b274e1bb84',4,'2020-01-02',NULL,'0'),('014f82fc263a4a1ab89a36b274e1bb84',5,'2020-01-07',NULL,'0'),('014f82fc263a4a1ab89a36b274e1bb84',6,'2020-01-08',NULL,'0'),('014f82fc263a4a1ab89a36b274e1bb84',7,'2020-01-15',NULL,'0'),('014f82fc263a4a1ab89a36b274e1bb84',8,'2020-01-16',NULL,'0'),('014f82fc263a4a1ab89a36b274e1bb84',9,'2020-01-30',NULL,'0'),('014f82fc263a4a1ab89a36b274e1bb84',10,'2020-01-31',NULL,'0'),('2d48a9121273497bbd705fb84d7d34f0',1,'2019-12-29','2019-12-29 18:25:14','1'),('2d48a9121273497bbd705fb84d7d34f0',2,'2019-12-30','2019-12-30 09:17:40','1'),('2d48a9121273497bbd705fb84d7d34f0',3,'2019-12-31','2019-12-31 09:26:18','1'),('2d48a9121273497bbd705fb84d7d34f0',4,'2020-01-02',NULL,'0'),('2d48a9121273497bbd705fb84d7d34f0',5,'2020-01-07',NULL,'0'),('2d48a9121273497bbd705fb84d7d34f0',6,'2020-01-08',NULL,'0'),('2d48a9121273497bbd705fb84d7d34f0',7,'2020-01-15',NULL,'0'),('2d48a9121273497bbd705fb84d7d34f0',8,'2020-01-16',NULL,'0'),('2d48a9121273497bbd705fb84d7d34f0',9,'2020-01-30',NULL,'0'),('2d48a9121273497bbd705fb84d7d34f0',10,'2020-01-31',NULL,'0'),('4f5512108b5a43a19857e1aa60578d6f',1,'2019-12-31','2019-12-31 10:48:56','1'),('4f5512108b5a43a19857e1aa60578d6f',2,'2020-01-01','2020-01-01 02:04:34','1'),('4f5512108b5a43a19857e1aa60578d6f',3,'2020-01-02',NULL,'0'),('4f5512108b5a43a19857e1aa60578d6f',4,'2020-01-04',NULL,'0'),('4f5512108b5a43a19857e1aa60578d6f',5,'2020-01-09',NULL,'0'),('4f5512108b5a43a19857e1aa60578d6f',6,'2020-01-10',NULL,'0'),('4f5512108b5a43a19857e1aa60578d6f',7,'2020-01-17',NULL,'0'),('4f5512108b5a43a19857e1aa60578d6f',8,'2020-01-18',NULL,'0'),('4f5512108b5a43a19857e1aa60578d6f',9,'2020-02-01',NULL,'0'),('4f5512108b5a43a19857e1aa60578d6f',10,'2020-02-02',NULL,'0'),('6ca5904355cd4ebcbfd278d5db80a188',1,'2019-12-29','2019-12-29 18:25:20','1'),('6ca5904355cd4ebcbfd278d5db80a188',2,'2019-12-30','2019-12-30 08:51:37','1'),('6ca5904355cd4ebcbfd278d5db80a188',3,'2019-12-31','2019-12-31 08:57:22','1'),('6ca5904355cd4ebcbfd278d5db80a188',4,'2020-01-02','2020-01-01 08:26:59','1'),('6ca5904355cd4ebcbfd278d5db80a188',5,'2020-01-07',NULL,'0'),('6ca5904355cd4ebcbfd278d5db80a188',6,'2020-01-08',NULL,'0'),('6ca5904355cd4ebcbfd278d5db80a188',7,'2020-01-15',NULL,'0'),('6ca5904355cd4ebcbfd278d5db80a188',8,'2020-01-16',NULL,'0'),('6ca5904355cd4ebcbfd278d5db80a188',9,'2020-01-30',NULL,'0'),('6ca5904355cd4ebcbfd278d5db80a188',10,'2020-01-31',NULL,'0'),('6f6a7d8658fd4fd4aa16675f7c6f390a',1,'2019-12-29','2019-12-29 18:33:58','1'),('6f6a7d8658fd4fd4aa16675f7c6f390a',2,'2019-12-30','2019-12-30 09:23:00','1'),('6f6a7d8658fd4fd4aa16675f7c6f390a',3,'2019-12-31','2019-12-31 09:39:34','1'),('6f6a7d8658fd4fd4aa16675f7c6f390a',4,'2020-01-02',NULL,'0'),('6f6a7d8658fd4fd4aa16675f7c6f390a',5,'2020-01-07',NULL,'0'),('6f6a7d8658fd4fd4aa16675f7c6f390a',6,'2020-01-08',NULL,'0'),('6f6a7d8658fd4fd4aa16675f7c6f390a',7,'2020-01-15',NULL,'0'),('6f6a7d8658fd4fd4aa16675f7c6f390a',8,'2020-01-16',NULL,'0'),('6f6a7d8658fd4fd4aa16675f7c6f390a',9,'2020-01-30',NULL,'0'),('6f6a7d8658fd4fd4aa16675f7c6f390a',10,'2020-01-31',NULL,'0'),('767e97eb47d54eecb5cb0ce55d5ed570',1,'2020-01-01','2020-01-01 16:00:12','1'),('767e97eb47d54eecb5cb0ce55d5ed570',2,'2020-01-02',NULL,'0'),('767e97eb47d54eecb5cb0ce55d5ed570',3,'2020-01-03',NULL,'0'),('767e97eb47d54eecb5cb0ce55d5ed570',4,'2020-01-05',NULL,'0'),('767e97eb47d54eecb5cb0ce55d5ed570',5,'2020-01-10',NULL,'0'),('767e97eb47d54eecb5cb0ce55d5ed570',6,'2020-01-11',NULL,'0'),('767e97eb47d54eecb5cb0ce55d5ed570',7,'2020-01-18',NULL,'0'),('767e97eb47d54eecb5cb0ce55d5ed570',8,'2020-01-19',NULL,'0'),('767e97eb47d54eecb5cb0ce55d5ed570',9,'2020-02-02',NULL,'0'),('767e97eb47d54eecb5cb0ce55d5ed570',10,'2020-02-03',NULL,'0'),('8269821bb2f74d3aad26e70b424f95c7',1,'2019-12-29','2019-12-29 18:25:26','1'),('8269821bb2f74d3aad26e70b424f95c7',2,'2019-12-30','2019-12-30 08:48:15','1'),('8269821bb2f74d3aad26e70b424f95c7',3,'2019-12-31','2019-12-31 08:54:27','1'),('8269821bb2f74d3aad26e70b424f95c7',4,'2020-01-02','2020-01-01 08:18:34','1'),('8269821bb2f74d3aad26e70b424f95c7',5,'2020-01-07',NULL,'0'),('8269821bb2f74d3aad26e70b424f95c7',6,'2020-01-08',NULL,'0'),('8269821bb2f74d3aad26e70b424f95c7',7,'2020-01-15',NULL,'0'),('8269821bb2f74d3aad26e70b424f95c7',8,'2020-01-16',NULL,'0'),('8269821bb2f74d3aad26e70b424f95c7',9,'2020-01-30',NULL,'0'),('8269821bb2f74d3aad26e70b424f95c7',10,'2020-01-31',NULL,'0'),('da68ea242b8f41bd86d4669f08a863f9',1,'2020-01-01','2020-01-01 16:01:09','1'),('da68ea242b8f41bd86d4669f08a863f9',2,'2020-01-02',NULL,'0'),('da68ea242b8f41bd86d4669f08a863f9',3,'2020-01-03',NULL,'0'),('da68ea242b8f41bd86d4669f08a863f9',4,'2020-01-05',NULL,'0'),('da68ea242b8f41bd86d4669f08a863f9',5,'2020-01-10',NULL,'0'),('da68ea242b8f41bd86d4669f08a863f9',6,'2020-01-11',NULL,'0'),('da68ea242b8f41bd86d4669f08a863f9',7,'2020-01-18',NULL,'0'),('da68ea242b8f41bd86d4669f08a863f9',8,'2020-01-19',NULL,'0'),('da68ea242b8f41bd86d4669f08a863f9',9,'2020-02-02',NULL,'0'),('da68ea242b8f41bd86d4669f08a863f9',10,'2020-02-03',NULL,'0'),('ecbdd470a4fb4eae8bba5cb6d0c7051e',1,'2019-12-29','2019-12-29 18:25:33','1'),('ecbdd470a4fb4eae8bba5cb6d0c7051e',2,'2019-12-30','2019-12-30 08:59:05','1'),('ecbdd470a4fb4eae8bba5cb6d0c7051e',3,'2019-12-31','2019-12-31 09:07:48','1'),('ecbdd470a4fb4eae8bba5cb6d0c7051e',4,'2020-01-02','2020-01-01 08:19:31','1'),('ecbdd470a4fb4eae8bba5cb6d0c7051e',5,'2020-01-07',NULL,'0'),('ecbdd470a4fb4eae8bba5cb6d0c7051e',6,'2020-01-08',NULL,'0'),('ecbdd470a4fb4eae8bba5cb6d0c7051e',7,'2020-01-15',NULL,'0'),('ecbdd470a4fb4eae8bba5cb6d0c7051e',8,'2020-01-16',NULL,'0'),('ecbdd470a4fb4eae8bba5cb6d0c7051e',9,'2020-01-30',NULL,'0'),('ecbdd470a4fb4eae8bba5cb6d0c7051e',10,'2020-01-31',NULL,'0');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
